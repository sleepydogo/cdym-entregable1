
ej4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000b90  00000c24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800110  00800110  00000c34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a5f  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000798  00000000  00000000  00001743  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000424  00000000  00000000  00001edb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00002300  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000484  00000000  00000000  0000239c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f1  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002b11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  68:	07 63       	ori	r16, 0x37	; 55
  6a:	42 36       	cpi	r20, 0x62	; 98
  6c:	b7 9b       	sbis	0x16, 7	; 22
  6e:	d8 a7       	std	Y+40, r29	; 0x28
  70:	1a 39       	cpi	r17, 0x9A	; 154
  72:	68 56       	subi	r22, 0x68	; 104
  74:	18 ae       	std	Y+56, r1	; 0x38
  76:	ba ab       	std	Y+50, r27	; 0x32
  78:	55 8c       	ldd	r5, Z+29	; 0x1d
  7a:	1d 3c       	cpi	r17, 0xCD	; 205
  7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
  7e:	57 63       	ori	r21, 0x37	; 55
  80:	bd 6d       	ori	r27, 0xDD	; 221
  82:	ed fd       	.word	0xfded	; ????
  84:	75 3e       	cpi	r23, 0xE5	; 229
  86:	f6 17       	cp	r31, r22
  88:	72 31       	cpi	r23, 0x12	; 18
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	08 00       	.word	0x0008	; ????
  92:	00 00       	nop
  94:	be 92       	st	-X, r11
  96:	24 49       	sbci	r18, 0x94	; 148
  98:	12 3e       	cpi	r17, 0xE2	; 226
  9a:	ab aa       	std	Y+51, r10	; 0x33
  9c:	aa 2a       	or	r10, r26
  9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
  a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
  a2:	4c 3e       	cpi	r20, 0xEC	; 236
  a4:	00 00       	nop
  a6:	00 80       	ld	r0, Z
  a8:	be ab       	std	Y+54, r27	; 0x36
  aa:	aa aa       	std	Y+50, r10	; 0x32
  ac:	aa 3e       	cpi	r26, 0xEA	; 234
  ae:	00 00       	nop
  b0:	00 00       	nop
  b2:	bf 00       	.word	0x00bf	; ????
  b4:	00 00       	nop
  b6:	80 3f       	cpi	r24, 0xF0	; 240
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	00 08       	sbc	r0, r0
  be:	41 78       	andi	r20, 0x81	; 129
  c0:	d3 bb       	out	0x13, r29	; 19
  c2:	43 87       	std	Z+11, r20	; 0x0b
  c4:	d1 13       	cpse	r29, r17
  c6:	3d 19       	sub	r19, r13
  c8:	0e 3c       	cpi	r16, 0xCE	; 206
  ca:	c3 bd       	out	0x23, r28	; 35
  cc:	42 82       	std	Z+2, r4	; 0x02
  ce:	ad 2b       	or	r26, r29
  d0:	3e 68       	ori	r19, 0x8E	; 142
  d2:	ec 82       	std	Y+4, r14	; 0x04
  d4:	76 be       	out	0x36, r7	; 54
  d6:	d9 8f       	std	Y+25, r29	; 0x19
  d8:	e1 a9       	ldd	r30, Z+49	; 0x31
  da:	3e 4c       	sbci	r19, 0xCE	; 206
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	ff be       	out	0x3f, r15	; 63
  e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <log+0x8e>
  e2:	ff 7f       	andi	r31, 0xFF	; 255
  e4:	3f 00       	.word	0x003f	; ????
  e6:	00 00       	nop
	...

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d8 e0       	ldi	r29, 0x08	; 8
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
  f6:	11 e0       	ldi	r17, 0x01	; 1
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	e0 e9       	ldi	r30, 0x90	; 144
  fe:	fb e0       	ldi	r31, 0x0B	; 11
 100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
 102:	05 90       	lpm	r0, Z+
 104:	0d 92       	st	X+, r0
 106:	a0 31       	cpi	r26, 0x10	; 16
 108:	b1 07       	cpc	r27, r17
 10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	a0 e1       	ldi	r26, 0x10	; 16
 110:	b1 e0       	ldi	r27, 0x01	; 1
 112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
 114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
 116:	a5 32       	cpi	r26, 0x25	; 37
 118:	b2 07       	cpc	r27, r18
 11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
 11c:	0e 94 c0 01 	call	0x380	; 0x380 <main>
 120:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <_exit>

00000124 <__bad_interrupt>:
 124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <actualizarDisplay>:
uint8_t debounceStop[] = {0, 0, 0, 0, 0};
uint8_t debounceReset[] = {0, 0, 0, 0, 0};

/* Muestra valor en el display n */
void actualizarDisplay(int valor, int ndisplay)
{
 128:	9b 01       	movw	r18, r22
    PORTB = segment_map[valor % 10];
 12a:	6a e0       	ldi	r22, 0x0A	; 10
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__divmodhi4>
 132:	fc 01       	movw	r30, r24
 134:	ee 5f       	subi	r30, 0xFE	; 254
 136:	fe 4f       	sbci	r31, 0xFE	; 254
 138:	80 81       	ld	r24, Z
 13a:	85 b9       	out	0x05, r24	; 5
    PORTC = display[ndisplay];
 13c:	f9 01       	movw	r30, r18
 13e:	e4 5f       	subi	r30, 0xF4	; 244
 140:	fe 4f       	sbci	r31, 0xFE	; 254
 142:	80 81       	ld	r24, Z
 144:	88 b9       	out	0x08, r24	; 8
 146:	08 95       	ret

00000148 <mostrarDig>:
}

/* Realiza un bucle que descompone la unidad temporal y muestra cada digito en su display correspondiente, recibe como parametro count que determina si se incrementa la unidad temporal o solo se muestra el valor actual de uni*/
void mostrarDig(uint8_t count)
{
 148:	cf 92       	push	r12
 14a:	df 92       	push	r13
 14c:	ef 92       	push	r14
 14e:	ff 92       	push	r15
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	18 2f       	mov	r17, r24
    aux = uni;
 158:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <uni>
 15c:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <uni+0x1>
 160:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <aux+0x1>
 164:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <aux>
    for (int i = 0; i <= 3; i++)
 168:	c0 e0       	ldi	r28, 0x00	; 0
 16a:	d0 e0       	ldi	r29, 0x00	; 0
 16c:	50 c0       	rjmp	.+160    	; 0x20e <mostrarDig+0xc6>
    {
        actualizarDisplay(aux % 10, i);
 16e:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <aux>
 172:	50 91 22 01 	lds	r21, 0x0122	; 0x800122 <aux+0x1>
 176:	9a 01       	movw	r18, r20
 178:	ad ec       	ldi	r26, 0xCD	; 205
 17a:	bc ec       	ldi	r27, 0xCC	; 204
 17c:	0e 94 a3 05 	call	0xb46	; 0xb46 <__umulhisi3>
 180:	96 95       	lsr	r25
 182:	87 95       	ror	r24
 184:	96 95       	lsr	r25
 186:	87 95       	ror	r24
 188:	96 95       	lsr	r25
 18a:	87 95       	ror	r24
 18c:	9c 01       	movw	r18, r24
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	82 0f       	add	r24, r18
 1a0:	93 1f       	adc	r25, r19
 1a2:	be 01       	movw	r22, r28
 1a4:	9a 01       	movw	r18, r20
 1a6:	28 1b       	sub	r18, r24
 1a8:	39 0b       	sbc	r19, r25
 1aa:	c9 01       	movw	r24, r18
 1ac:	0e 94 94 00 	call	0x128	; 0x128 <actualizarDisplay>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	8f e0       	ldi	r24, 0x0F	; 15
 1b2:	97 e2       	ldi	r25, 0x27	; 39
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <mostrarDig+0x6c>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <mostrarDig+0x72>
 1ba:	00 00       	nop
        _delay_ms(2.5);
        if (i != 3)
 1bc:	c3 30       	cpi	r28, 0x03	; 3
 1be:	d1 05       	cpc	r29, r1
 1c0:	29 f1       	breq	.+74     	; 0x20c <mostrarDig+0xc4>
        {
            aux = uni / (pow(10, i + 1));
 1c2:	be 01       	movw	r22, r28
 1c4:	6f 5f       	subi	r22, 0xFF	; 255
 1c6:	7f 4f       	sbci	r23, 0xFF	; 255
 1c8:	07 2e       	mov	r0, r23
 1ca:	00 0c       	add	r0, r0
 1cc:	88 0b       	sbc	r24, r24
 1ce:	99 0b       	sbc	r25, r25
 1d0:	0e 94 a4 02 	call	0x548	; 0x548 <__floatsisf>
 1d4:	9b 01       	movw	r18, r22
 1d6:	ac 01       	movw	r20, r24
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	80 e2       	ldi	r24, 0x20	; 32
 1de:	91 e4       	ldi	r25, 0x41	; 65
 1e0:	0e 94 30 03 	call	0x660	; 0x660 <pow>
 1e4:	6b 01       	movw	r12, r22
 1e6:	7c 01       	movw	r14, r24
 1e8:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <uni>
 1ec:	70 91 24 01 	lds	r23, 0x0124	; 0x800124 <uni+0x1>
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 a2 02 	call	0x544	; 0x544 <__floatunsisf>
 1f8:	a7 01       	movw	r20, r14
 1fa:	96 01       	movw	r18, r12
 1fc:	0e 94 01 02 	call	0x402	; 0x402 <__divsf3>
 200:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__fixunssfsi>
 204:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <aux+0x1>
 208:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <aux>

/* Realiza un bucle que descompone la unidad temporal y muestra cada digito en su display correspondiente, recibe como parametro count que determina si se incrementa la unidad temporal o solo se muestra el valor actual de uni*/
void mostrarDig(uint8_t count)
{
    aux = uni;
    for (int i = 0; i <= 3; i++)
 20c:	21 96       	adiw	r28, 0x01	; 1
 20e:	c4 30       	cpi	r28, 0x04	; 4
 210:	d1 05       	cpc	r29, r1
 212:	0c f4       	brge	.+2      	; 0x216 <mostrarDig+0xce>
 214:	ac cf       	rjmp	.-168    	; 0x16e <mostrarDig+0x26>
        if (i != 3)
        {
            aux = uni / (pow(10, i + 1));
        }
    }
    if (count == 1)
 216:	11 30       	cpi	r17, 0x01	; 1
 218:	49 f4       	brne	.+18     	; 0x22c <mostrarDig+0xe4>
    {
        uni++;
 21a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <uni>
 21e:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <uni+0x1>
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <uni+0x1>
 228:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <uni>
    }
    return;
}
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	1f 91       	pop	r17
 232:	ff 90       	pop	r15
 234:	ef 90       	pop	r14
 236:	df 90       	pop	r13
 238:	cf 90       	pop	r12
 23a:	08 95       	ret

0000023c <checkButton>:

/* Checkea si hay un pulso positivo en el PINX_X del puerto PINX */
int checkButton(uint8_t PINX, uint8_t PINX_X)
{
    if ((PINX & (1 << PINX_X)) == 0)
 23c:	28 2f       	mov	r18, r24
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <checkButton+0xa>
 242:	35 95       	asr	r19
 244:	27 95       	ror	r18
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <checkButton+0x6>
 24a:	c9 01       	movw	r24, r18
 24c:	81 70       	andi	r24, 0x01	; 1
 24e:	99 27       	eor	r25, r25
 250:	20 ff       	sbrs	r18, 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <checkButton+0x1c>
    {
        return 0;
    }
    return 1;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
}
 258:	08 95       	ret

0000025a <buttonControl>:
    Recibe como parametro value, el cual es un valor numerico en el rango [0..4], este valor incrementa de manera circular desde 0 a 4. Se usa como indice de los vectores de debounce almacenando en ellos el valor que retorna checkButton().
    Luego se hace una suma de los valores de los vectores de debounce. Si la suma es igual a 5, significa que el boton ha sido pulsado. Por un tiempo prolongado y que esto no se debe a un efecto rebote. Se implementa la logica para cada caso.
    Esta logica consiste en resetear a 0 los vectores de debounce asociados a la operacion a realizar y poner la variable que representa el estado (stop, reset, start) en 1.  
*/
void buttonControl(uint8_t value)
{
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
    int totalStop = 0, totalReset = 0, totalStart = 0;

    debounceStart[value] = checkButton(PINC, PINC4); // Chequeamos si START esta presionado
 262:	c8 2f       	mov	r28, r24
 264:	d0 e0       	ldi	r29, 0x00	; 0
 266:	86 b1       	in	r24, 0x06	; 6
 268:	64 e0       	ldi	r22, 0x04	; 4
 26a:	0e 94 1e 01 	call	0x23c	; 0x23c <checkButton>
 26e:	fe 01       	movw	r30, r28
 270:	e6 5e       	subi	r30, 0xE6	; 230
 272:	fe 4f       	sbci	r31, 0xFE	; 254
 274:	80 83       	st	Z, r24
    debounceStop[value] = checkButton(PINC, PINC5);  // Chequeamos si STOP esta presionado
 276:	86 b1       	in	r24, 0x06	; 6
 278:	65 e0       	ldi	r22, 0x05	; 5
 27a:	0e 94 1e 01 	call	0x23c	; 0x23c <checkButton>
 27e:	fe 01       	movw	r30, r28
 280:	eb 5e       	subi	r30, 0xEB	; 235
 282:	fe 4f       	sbci	r31, 0xFE	; 254
 284:	80 83       	st	Z, r24
    debounceReset[value] = checkButton(PINB, PINB7); // Chequeamos si RESET esta presionado
 286:	83 b1       	in	r24, 0x03	; 3
 288:	67 e0       	ldi	r22, 0x07	; 7
 28a:	0e 94 1e 01 	call	0x23c	; 0x23c <checkButton>
 28e:	c0 5f       	subi	r28, 0xF0	; 240
 290:	de 4f       	sbci	r29, 0xFE	; 254
 292:	88 83       	st	Y, r24

    for (int i = 0; i < 5; i++)
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
    Luego se hace una suma de los valores de los vectores de debounce. Si la suma es igual a 5, significa que el boton ha sido pulsado. Por un tiempo prolongado y que esto no se debe a un efecto rebote. Se implementa la logica para cada caso.
    Esta logica consiste en resetear a 0 los vectores de debounce asociados a la operacion a realizar y poner la variable que representa el estado (stop, reset, start) en 1.  
*/
void buttonControl(uint8_t value)
{
    int totalStop = 0, totalReset = 0, totalStart = 0;
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	c0 e0       	ldi	r28, 0x00	; 0
 29e:	d0 e0       	ldi	r29, 0x00	; 0
 2a0:	00 e0       	ldi	r16, 0x00	; 0
 2a2:	10 e0       	ldi	r17, 0x00	; 0

    debounceStart[value] = checkButton(PINC, PINC4); // Chequeamos si START esta presionado
    debounceStop[value] = checkButton(PINC, PINC5);  // Chequeamos si STOP esta presionado
    debounceReset[value] = checkButton(PINB, PINB7); // Chequeamos si RESET esta presionado

    for (int i = 0; i < 5; i++)
 2a4:	13 c0       	rjmp	.+38     	; 0x2cc <buttonControl+0x72>
    {
        totalStart += debounceStart[i];
 2a6:	fc 01       	movw	r30, r24
 2a8:	e6 5e       	subi	r30, 0xE6	; 230
 2aa:	fe 4f       	sbci	r31, 0xFE	; 254
 2ac:	40 81       	ld	r20, Z
 2ae:	24 0f       	add	r18, r20
 2b0:	31 1d       	adc	r19, r1
        totalStop += debounceStop[i];
 2b2:	fc 01       	movw	r30, r24
 2b4:	eb 5e       	subi	r30, 0xEB	; 235
 2b6:	fe 4f       	sbci	r31, 0xFE	; 254
 2b8:	40 81       	ld	r20, Z
 2ba:	04 0f       	add	r16, r20
 2bc:	11 1d       	adc	r17, r1
        totalReset += debounceReset[i];
 2be:	fc 01       	movw	r30, r24
 2c0:	e0 5f       	subi	r30, 0xF0	; 240
 2c2:	fe 4f       	sbci	r31, 0xFE	; 254
 2c4:	40 81       	ld	r20, Z
 2c6:	c4 0f       	add	r28, r20
 2c8:	d1 1d       	adc	r29, r1

    debounceStart[value] = checkButton(PINC, PINC4); // Chequeamos si START esta presionado
    debounceStop[value] = checkButton(PINC, PINC5);  // Chequeamos si STOP esta presionado
    debounceReset[value] = checkButton(PINB, PINB7); // Chequeamos si RESET esta presionado

    for (int i = 0; i < 5; i++)
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	85 30       	cpi	r24, 0x05	; 5
 2ce:	91 05       	cpc	r25, r1
 2d0:	54 f3       	brlt	.-44     	; 0x2a6 <buttonControl+0x4c>
        totalStart += debounceStart[i];
        totalStop += debounceStop[i];
        totalReset += debounceReset[i];
    }

    if (totalStart == 5)
 2d2:	25 30       	cpi	r18, 0x05	; 5
 2d4:	31 05       	cpc	r19, r1
 2d6:	c9 f4       	brne	.+50     	; 0x30a <buttonControl+0xb0>
    {
	    while (checkButton(PINC, PINC4) == 1);
 2d8:	86 b1       	in	r24, 0x06	; 6
 2da:	64 e0       	ldi	r22, 0x04	; 4
 2dc:	0e 94 1e 01 	call	0x23c	; 0x23c <checkButton>
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	d1 f3       	breq	.-12     	; 0x2d8 <buttonControl+0x7e>
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	09 c0       	rjmp	.+18     	; 0x2fc <buttonControl+0xa2>
        for (int i = 0; i < 5; i++)
        {
            debounceStart[i] = 0;
 2ea:	fc 01       	movw	r30, r24
 2ec:	e6 5e       	subi	r30, 0xE6	; 230
 2ee:	fe 4f       	sbci	r31, 0xFE	; 254
 2f0:	10 82       	st	Z, r1
            debounceStop[i] = 0;
 2f2:	fc 01       	movw	r30, r24
 2f4:	eb 5e       	subi	r30, 0xEB	; 235
 2f6:	fe 4f       	sbci	r31, 0xFE	; 254
 2f8:	10 82       	st	Z, r1
    }

    if (totalStart == 5)
    {
	    while (checkButton(PINC, PINC4) == 1);
        for (int i = 0; i < 5; i++)
 2fa:	01 96       	adiw	r24, 0x01	; 1
 2fc:	85 30       	cpi	r24, 0x05	; 5
 2fe:	91 05       	cpc	r25, r1
 300:	a4 f3       	brlt	.-24     	; 0x2ea <buttonControl+0x90>
        {
            debounceStart[i] = 0;
            debounceStop[i] = 0;
        }
		stop = 0;
 302:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 306:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
    }
    if (totalStop == 5)
 30a:	05 30       	cpi	r16, 0x05	; 5
 30c:	11 05       	cpc	r17, r1
 30e:	91 f4       	brne	.+36     	; 0x334 <buttonControl+0xda>
 310:	06 c0       	rjmp	.+12     	; 0x31e <buttonControl+0xc4>
    {      
        for (int i = 0; i < 5; i++)
        {
            debounceStop[i] = 0;
 312:	fc 01       	movw	r30, r24
 314:	eb 5e       	subi	r30, 0xEB	; 235
 316:	fe 4f       	sbci	r31, 0xFE	; 254
 318:	10 82       	st	Z, r1
        }
		stop = 0;
    }
    if (totalStop == 5)
    {      
        for (int i = 0; i < 5; i++)
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	02 c0       	rjmp	.+4      	; 0x322 <buttonControl+0xc8>
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	85 30       	cpi	r24, 0x05	; 5
 324:	91 05       	cpc	r25, r1
 326:	ac f3       	brlt	.-22     	; 0x312 <buttonControl+0xb8>
        {
            debounceStop[i] = 0;
        }
		stop = 1;
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 330:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
    if (totalReset == 5)
 334:	25 97       	sbiw	r28, 0x05	; 5
 336:	f9 f4       	brne	.+62     	; 0x376 <buttonControl+0x11c>
    {
        while (checkButton(PINB, PINB7) == 1);
 338:	83 b1       	in	r24, 0x03	; 3
 33a:	67 e0       	ldi	r22, 0x07	; 7
 33c:	0e 94 1e 01 	call	0x23c	; 0x23c <checkButton>
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	d1 f3       	breq	.-12     	; 0x338 <buttonControl+0xde>
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	05 c0       	rjmp	.+10     	; 0x354 <buttonControl+0xfa>
        for (int i = 0; i < 5; i++)
        {
            debounceStop[i] = 0;
 34a:	fc 01       	movw	r30, r24
 34c:	eb 5e       	subi	r30, 0xEB	; 235
 34e:	fe 4f       	sbci	r31, 0xFE	; 254
 350:	10 82       	st	Z, r1
		stop = 1;
	}
    if (totalReset == 5)
    {
        while (checkButton(PINB, PINB7) == 1);
        for (int i = 0; i < 5; i++)
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	85 30       	cpi	r24, 0x05	; 5
 356:	91 05       	cpc	r25, r1
 358:	c4 f3       	brlt	.-16     	; 0x34a <buttonControl+0xf0>
        {
            debounceStop[i] = 0;
        }
		reset = 1;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <reset+0x1>
 362:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <reset>
		stop = 1;
 366:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 36a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		uni = 0;
 36e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <uni+0x1>
 372:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <uni>
    }
}
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	08 95       	ret

00000380 <main>:

int main(void)
{
    /* Configuracion de los puertos */
    DDRB = 0x7F;
 380:	8f e7       	ldi	r24, 0x7F	; 127
 382:	84 b9       	out	0x04, r24	; 4
    DDRC = 0x0F;
 384:	8f e0       	ldi	r24, 0x0F	; 15
 386:	87 b9       	out	0x07, r24	; 7
    PORTB = segment_map[uni];
 388:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <uni>
 38c:	f0 91 24 01 	lds	r31, 0x0124	; 0x800124 <uni+0x1>
 390:	ee 5f       	subi	r30, 0xFE	; 254
 392:	fe 4f       	sbci	r31, 0xFE	; 254
 394:	80 81       	ld	r24, Z
 396:	85 b9       	out	0x05, r24	; 5
	uint8_t controlValue = 0; // Se utiliza para brindar un valor value a la funcion buttonControl().
 398:	c0 e0       	ldi	r28, 0x00	; 0
 39a:	1b c0       	rjmp	.+54     	; 0x3d2 <main+0x52>
        /* 
            Si stop esta en 1 se llama a la rutina mostrarDig() con argumento 0 para que se muestre el valor de uni y cada vez que termina la funcion se incrementa en 1 esta variable.
        */
        while (stop == 0)
        {
            mostrarDig(1);
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 a4 00 	call	0x148	; 0x148 <mostrarDig>
            buttonControl(uni % 5);
 3a2:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <uni>
 3a6:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <uni+0x1>
 3aa:	24 2f       	mov	r18, r20
 3ac:	ad ec       	ldi	r26, 0xCD	; 205
 3ae:	bc ec       	ldi	r27, 0xCC	; 204
 3b0:	0e 94 a3 05 	call	0xb46	; 0xb46 <__umulhisi3>
 3b4:	96 95       	lsr	r25
 3b6:	87 95       	ror	r24
 3b8:	96 95       	lsr	r25
 3ba:	87 95       	ror	r24
 3bc:	9c 01       	movw	r18, r24
 3be:	22 0f       	add	r18, r18
 3c0:	33 1f       	adc	r19, r19
 3c2:	22 0f       	add	r18, r18
 3c4:	33 1f       	adc	r19, r19
 3c6:	82 0f       	add	r24, r18
 3c8:	93 1f       	adc	r25, r19
 3ca:	48 1b       	sub	r20, r24
 3cc:	84 2f       	mov	r24, r20
 3ce:	0e 94 2d 01 	call	0x25a	; 0x25a <buttonControl>
    while (1)
    {
        /* 
            Si stop esta en 1 se llama a la rutina mostrarDig() con argumento 0 para que se muestre el valor de uni y cada vez que termina la funcion se incrementa en 1 esta variable.
        */
        while (stop == 0)
 3d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3da:	89 2b       	or	r24, r25
 3dc:	59 f4       	brne	.+22     	; 0x3f4 <main+0x74>
 3de:	de cf       	rjmp	.-68     	; 0x39c <main+0x1c>
            Luego se llama a la funcion buttonControl() para el checkeo de los botones. Esta funcion se llama cada 10ms.
            Luego se llama a la funcion buttonControl() para el checkeo de los botones. Como aqui no tenemos un incremento en uni es necesario crear otra variable que itere de 0 a 4 para pasar el valor a buttonControl(). 
        */
        while (stop == 1)
        {
			if (controlValue == 6) {
 3e0:	c6 30       	cpi	r28, 0x06	; 6
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <main+0x66>
				controlValue = 0;
 3e4:	c0 e0       	ldi	r28, 0x00	; 0
			}
			mostrarDig(0);
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	0e 94 a4 00 	call	0x148	; 0x148 <mostrarDig>
			buttonControl(controlValue);
 3ec:	8c 2f       	mov	r24, r28
 3ee:	0e 94 2d 01 	call	0x25a	; 0x25a <buttonControl>
			controlValue++;
 3f2:	cf 5f       	subi	r28, 0xFF	; 255
        /* 
            Si stop esta en 0 se llama a la rutina mostrarDig() con argumento 1 para que se muestre el valor de uni actual sin modificarlo.
            Luego se llama a la funcion buttonControl() para el checkeo de los botones. Esta funcion se llama cada 10ms.
            Luego se llama a la funcion buttonControl() para el checkeo de los botones. Como aqui no tenemos un incremento en uni es necesario crear otra variable que itere de 0 a 4 para pasar el valor a buttonControl(). 
        */
        while (stop == 1)
 3f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3fc:	01 97       	sbiw	r24, 0x01	; 1
 3fe:	81 f3       	breq	.-32     	; 0x3e0 <main+0x60>
 400:	e8 cf       	rjmp	.-48     	; 0x3d2 <main+0x52>

00000402 <__divsf3>:
 402:	0e 94 15 02 	call	0x42a	; 0x42a <__divsf3x>
 406:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_round>
 40a:	0e 94 ef 02 	call	0x5de	; 0x5de <__fp_pscB>
 40e:	58 f0       	brcs	.+22     	; 0x426 <__divsf3+0x24>
 410:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__fp_pscA>
 414:	40 f0       	brcs	.+16     	; 0x426 <__divsf3+0x24>
 416:	29 f4       	brne	.+10     	; 0x422 <__divsf3+0x20>
 418:	5f 3f       	cpi	r21, 0xFF	; 255
 41a:	29 f0       	breq	.+10     	; 0x426 <__divsf3+0x24>
 41c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_inf>
 420:	51 11       	cpse	r21, r1
 422:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_szero>
 426:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__fp_nan>

0000042a <__divsf3x>:
 42a:	0e 94 07 03 	call	0x60e	; 0x60e <__fp_split3>
 42e:	68 f3       	brcs	.-38     	; 0x40a <__divsf3+0x8>

00000430 <__divsf3_pse>:
 430:	99 23       	and	r25, r25
 432:	b1 f3       	breq	.-20     	; 0x420 <__divsf3+0x1e>
 434:	55 23       	and	r21, r21
 436:	91 f3       	breq	.-28     	; 0x41c <__divsf3+0x1a>
 438:	95 1b       	sub	r25, r21
 43a:	55 0b       	sbc	r21, r21
 43c:	bb 27       	eor	r27, r27
 43e:	aa 27       	eor	r26, r26
 440:	62 17       	cp	r22, r18
 442:	73 07       	cpc	r23, r19
 444:	84 07       	cpc	r24, r20
 446:	38 f0       	brcs	.+14     	; 0x456 <__divsf3_pse+0x26>
 448:	9f 5f       	subi	r25, 0xFF	; 255
 44a:	5f 4f       	sbci	r21, 0xFF	; 255
 44c:	22 0f       	add	r18, r18
 44e:	33 1f       	adc	r19, r19
 450:	44 1f       	adc	r20, r20
 452:	aa 1f       	adc	r26, r26
 454:	a9 f3       	breq	.-22     	; 0x440 <__divsf3_pse+0x10>
 456:	35 d0       	rcall	.+106    	; 0x4c2 <__divsf3_pse+0x92>
 458:	0e 2e       	mov	r0, r30
 45a:	3a f0       	brmi	.+14     	; 0x46a <__divsf3_pse+0x3a>
 45c:	e0 e8       	ldi	r30, 0x80	; 128
 45e:	32 d0       	rcall	.+100    	; 0x4c4 <__divsf3_pse+0x94>
 460:	91 50       	subi	r25, 0x01	; 1
 462:	50 40       	sbci	r21, 0x00	; 0
 464:	e6 95       	lsr	r30
 466:	00 1c       	adc	r0, r0
 468:	ca f7       	brpl	.-14     	; 0x45c <__divsf3_pse+0x2c>
 46a:	2b d0       	rcall	.+86     	; 0x4c2 <__divsf3_pse+0x92>
 46c:	fe 2f       	mov	r31, r30
 46e:	29 d0       	rcall	.+82     	; 0x4c2 <__divsf3_pse+0x92>
 470:	66 0f       	add	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	88 1f       	adc	r24, r24
 476:	bb 1f       	adc	r27, r27
 478:	26 17       	cp	r18, r22
 47a:	37 07       	cpc	r19, r23
 47c:	48 07       	cpc	r20, r24
 47e:	ab 07       	cpc	r26, r27
 480:	b0 e8       	ldi	r27, 0x80	; 128
 482:	09 f0       	breq	.+2      	; 0x486 <__divsf3_pse+0x56>
 484:	bb 0b       	sbc	r27, r27
 486:	80 2d       	mov	r24, r0
 488:	bf 01       	movw	r22, r30
 48a:	ff 27       	eor	r31, r31
 48c:	93 58       	subi	r25, 0x83	; 131
 48e:	5f 4f       	sbci	r21, 0xFF	; 255
 490:	3a f0       	brmi	.+14     	; 0x4a0 <__divsf3_pse+0x70>
 492:	9e 3f       	cpi	r25, 0xFE	; 254
 494:	51 05       	cpc	r21, r1
 496:	78 f0       	brcs	.+30     	; 0x4b6 <__divsf3_pse+0x86>
 498:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_inf>
 49c:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_szero>
 4a0:	5f 3f       	cpi	r21, 0xFF	; 255
 4a2:	e4 f3       	brlt	.-8      	; 0x49c <__divsf3_pse+0x6c>
 4a4:	98 3e       	cpi	r25, 0xE8	; 232
 4a6:	d4 f3       	brlt	.-12     	; 0x49c <__divsf3_pse+0x6c>
 4a8:	86 95       	lsr	r24
 4aa:	77 95       	ror	r23
 4ac:	67 95       	ror	r22
 4ae:	b7 95       	ror	r27
 4b0:	f7 95       	ror	r31
 4b2:	9f 5f       	subi	r25, 0xFF	; 255
 4b4:	c9 f7       	brne	.-14     	; 0x4a8 <__divsf3_pse+0x78>
 4b6:	88 0f       	add	r24, r24
 4b8:	91 1d       	adc	r25, r1
 4ba:	96 95       	lsr	r25
 4bc:	87 95       	ror	r24
 4be:	97 f9       	bld	r25, 7
 4c0:	08 95       	ret
 4c2:	e1 e0       	ldi	r30, 0x01	; 1
 4c4:	66 0f       	add	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	88 1f       	adc	r24, r24
 4ca:	bb 1f       	adc	r27, r27
 4cc:	62 17       	cp	r22, r18
 4ce:	73 07       	cpc	r23, r19
 4d0:	84 07       	cpc	r24, r20
 4d2:	ba 07       	cpc	r27, r26
 4d4:	20 f0       	brcs	.+8      	; 0x4de <__divsf3_pse+0xae>
 4d6:	62 1b       	sub	r22, r18
 4d8:	73 0b       	sbc	r23, r19
 4da:	84 0b       	sbc	r24, r20
 4dc:	ba 0b       	sbc	r27, r26
 4de:	ee 1f       	adc	r30, r30
 4e0:	88 f7       	brcc	.-30     	; 0x4c4 <__divsf3_pse+0x94>
 4e2:	e0 95       	com	r30
 4e4:	08 95       	ret

000004e6 <__fixunssfsi>:
 4e6:	0e 94 0f 03 	call	0x61e	; 0x61e <__fp_splitA>
 4ea:	88 f0       	brcs	.+34     	; 0x50e <__fixunssfsi+0x28>
 4ec:	9f 57       	subi	r25, 0x7F	; 127
 4ee:	98 f0       	brcs	.+38     	; 0x516 <__fixunssfsi+0x30>
 4f0:	b9 2f       	mov	r27, r25
 4f2:	99 27       	eor	r25, r25
 4f4:	b7 51       	subi	r27, 0x17	; 23
 4f6:	b0 f0       	brcs	.+44     	; 0x524 <__fixunssfsi+0x3e>
 4f8:	e1 f0       	breq	.+56     	; 0x532 <__fixunssfsi+0x4c>
 4fa:	66 0f       	add	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	88 1f       	adc	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	1a f0       	brmi	.+6      	; 0x50a <__fixunssfsi+0x24>
 504:	ba 95       	dec	r27
 506:	c9 f7       	brne	.-14     	; 0x4fa <__fixunssfsi+0x14>
 508:	14 c0       	rjmp	.+40     	; 0x532 <__fixunssfsi+0x4c>
 50a:	b1 30       	cpi	r27, 0x01	; 1
 50c:	91 f0       	breq	.+36     	; 0x532 <__fixunssfsi+0x4c>
 50e:	0e 94 29 03 	call	0x652	; 0x652 <__fp_zero>
 512:	b1 e0       	ldi	r27, 0x01	; 1
 514:	08 95       	ret
 516:	0c 94 29 03 	jmp	0x652	; 0x652 <__fp_zero>
 51a:	67 2f       	mov	r22, r23
 51c:	78 2f       	mov	r23, r24
 51e:	88 27       	eor	r24, r24
 520:	b8 5f       	subi	r27, 0xF8	; 248
 522:	39 f0       	breq	.+14     	; 0x532 <__fixunssfsi+0x4c>
 524:	b9 3f       	cpi	r27, 0xF9	; 249
 526:	cc f3       	brlt	.-14     	; 0x51a <__fixunssfsi+0x34>
 528:	86 95       	lsr	r24
 52a:	77 95       	ror	r23
 52c:	67 95       	ror	r22
 52e:	b3 95       	inc	r27
 530:	d9 f7       	brne	.-10     	; 0x528 <__fixunssfsi+0x42>
 532:	3e f4       	brtc	.+14     	; 0x542 <__fixunssfsi+0x5c>
 534:	90 95       	com	r25
 536:	80 95       	com	r24
 538:	70 95       	com	r23
 53a:	61 95       	neg	r22
 53c:	7f 4f       	sbci	r23, 0xFF	; 255
 53e:	8f 4f       	sbci	r24, 0xFF	; 255
 540:	9f 4f       	sbci	r25, 0xFF	; 255
 542:	08 95       	ret

00000544 <__floatunsisf>:
 544:	e8 94       	clt
 546:	09 c0       	rjmp	.+18     	; 0x55a <__floatsisf+0x12>

00000548 <__floatsisf>:
 548:	97 fb       	bst	r25, 7
 54a:	3e f4       	brtc	.+14     	; 0x55a <__floatsisf+0x12>
 54c:	90 95       	com	r25
 54e:	80 95       	com	r24
 550:	70 95       	com	r23
 552:	61 95       	neg	r22
 554:	7f 4f       	sbci	r23, 0xFF	; 255
 556:	8f 4f       	sbci	r24, 0xFF	; 255
 558:	9f 4f       	sbci	r25, 0xFF	; 255
 55a:	99 23       	and	r25, r25
 55c:	a9 f0       	breq	.+42     	; 0x588 <__floatsisf+0x40>
 55e:	f9 2f       	mov	r31, r25
 560:	96 e9       	ldi	r25, 0x96	; 150
 562:	bb 27       	eor	r27, r27
 564:	93 95       	inc	r25
 566:	f6 95       	lsr	r31
 568:	87 95       	ror	r24
 56a:	77 95       	ror	r23
 56c:	67 95       	ror	r22
 56e:	b7 95       	ror	r27
 570:	f1 11       	cpse	r31, r1
 572:	f8 cf       	rjmp	.-16     	; 0x564 <__floatsisf+0x1c>
 574:	fa f4       	brpl	.+62     	; 0x5b4 <__floatsisf+0x6c>
 576:	bb 0f       	add	r27, r27
 578:	11 f4       	brne	.+4      	; 0x57e <__floatsisf+0x36>
 57a:	60 ff       	sbrs	r22, 0
 57c:	1b c0       	rjmp	.+54     	; 0x5b4 <__floatsisf+0x6c>
 57e:	6f 5f       	subi	r22, 0xFF	; 255
 580:	7f 4f       	sbci	r23, 0xFF	; 255
 582:	8f 4f       	sbci	r24, 0xFF	; 255
 584:	9f 4f       	sbci	r25, 0xFF	; 255
 586:	16 c0       	rjmp	.+44     	; 0x5b4 <__floatsisf+0x6c>
 588:	88 23       	and	r24, r24
 58a:	11 f0       	breq	.+4      	; 0x590 <__floatsisf+0x48>
 58c:	96 e9       	ldi	r25, 0x96	; 150
 58e:	11 c0       	rjmp	.+34     	; 0x5b2 <__floatsisf+0x6a>
 590:	77 23       	and	r23, r23
 592:	21 f0       	breq	.+8      	; 0x59c <__floatsisf+0x54>
 594:	9e e8       	ldi	r25, 0x8E	; 142
 596:	87 2f       	mov	r24, r23
 598:	76 2f       	mov	r23, r22
 59a:	05 c0       	rjmp	.+10     	; 0x5a6 <__floatsisf+0x5e>
 59c:	66 23       	and	r22, r22
 59e:	71 f0       	breq	.+28     	; 0x5bc <__floatsisf+0x74>
 5a0:	96 e8       	ldi	r25, 0x86	; 134
 5a2:	86 2f       	mov	r24, r22
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	2a f0       	brmi	.+10     	; 0x5b4 <__floatsisf+0x6c>
 5aa:	9a 95       	dec	r25
 5ac:	66 0f       	add	r22, r22
 5ae:	77 1f       	adc	r23, r23
 5b0:	88 1f       	adc	r24, r24
 5b2:	da f7       	brpl	.-10     	; 0x5aa <__floatsisf+0x62>
 5b4:	88 0f       	add	r24, r24
 5b6:	96 95       	lsr	r25
 5b8:	87 95       	ror	r24
 5ba:	97 f9       	bld	r25, 7
 5bc:	08 95       	ret

000005be <__fp_inf>:
 5be:	97 f9       	bld	r25, 7
 5c0:	9f 67       	ori	r25, 0x7F	; 127
 5c2:	80 e8       	ldi	r24, 0x80	; 128
 5c4:	70 e0       	ldi	r23, 0x00	; 0
 5c6:	60 e0       	ldi	r22, 0x00	; 0
 5c8:	08 95       	ret

000005ca <__fp_nan>:
 5ca:	9f ef       	ldi	r25, 0xFF	; 255
 5cc:	80 ec       	ldi	r24, 0xC0	; 192
 5ce:	08 95       	ret

000005d0 <__fp_pscA>:
 5d0:	00 24       	eor	r0, r0
 5d2:	0a 94       	dec	r0
 5d4:	16 16       	cp	r1, r22
 5d6:	17 06       	cpc	r1, r23
 5d8:	18 06       	cpc	r1, r24
 5da:	09 06       	cpc	r0, r25
 5dc:	08 95       	ret

000005de <__fp_pscB>:
 5de:	00 24       	eor	r0, r0
 5e0:	0a 94       	dec	r0
 5e2:	12 16       	cp	r1, r18
 5e4:	13 06       	cpc	r1, r19
 5e6:	14 06       	cpc	r1, r20
 5e8:	05 06       	cpc	r0, r21
 5ea:	08 95       	ret

000005ec <__fp_round>:
 5ec:	09 2e       	mov	r0, r25
 5ee:	03 94       	inc	r0
 5f0:	00 0c       	add	r0, r0
 5f2:	11 f4       	brne	.+4      	; 0x5f8 <__fp_round+0xc>
 5f4:	88 23       	and	r24, r24
 5f6:	52 f0       	brmi	.+20     	; 0x60c <__fp_round+0x20>
 5f8:	bb 0f       	add	r27, r27
 5fa:	40 f4       	brcc	.+16     	; 0x60c <__fp_round+0x20>
 5fc:	bf 2b       	or	r27, r31
 5fe:	11 f4       	brne	.+4      	; 0x604 <__fp_round+0x18>
 600:	60 ff       	sbrs	r22, 0
 602:	04 c0       	rjmp	.+8      	; 0x60c <__fp_round+0x20>
 604:	6f 5f       	subi	r22, 0xFF	; 255
 606:	7f 4f       	sbci	r23, 0xFF	; 255
 608:	8f 4f       	sbci	r24, 0xFF	; 255
 60a:	9f 4f       	sbci	r25, 0xFF	; 255
 60c:	08 95       	ret

0000060e <__fp_split3>:
 60e:	57 fd       	sbrc	r21, 7
 610:	90 58       	subi	r25, 0x80	; 128
 612:	44 0f       	add	r20, r20
 614:	55 1f       	adc	r21, r21
 616:	59 f0       	breq	.+22     	; 0x62e <__fp_splitA+0x10>
 618:	5f 3f       	cpi	r21, 0xFF	; 255
 61a:	71 f0       	breq	.+28     	; 0x638 <__fp_splitA+0x1a>
 61c:	47 95       	ror	r20

0000061e <__fp_splitA>:
 61e:	88 0f       	add	r24, r24
 620:	97 fb       	bst	r25, 7
 622:	99 1f       	adc	r25, r25
 624:	61 f0       	breq	.+24     	; 0x63e <__fp_splitA+0x20>
 626:	9f 3f       	cpi	r25, 0xFF	; 255
 628:	79 f0       	breq	.+30     	; 0x648 <__fp_splitA+0x2a>
 62a:	87 95       	ror	r24
 62c:	08 95       	ret
 62e:	12 16       	cp	r1, r18
 630:	13 06       	cpc	r1, r19
 632:	14 06       	cpc	r1, r20
 634:	55 1f       	adc	r21, r21
 636:	f2 cf       	rjmp	.-28     	; 0x61c <__fp_split3+0xe>
 638:	46 95       	lsr	r20
 63a:	f1 df       	rcall	.-30     	; 0x61e <__fp_splitA>
 63c:	08 c0       	rjmp	.+16     	; 0x64e <__fp_splitA+0x30>
 63e:	16 16       	cp	r1, r22
 640:	17 06       	cpc	r1, r23
 642:	18 06       	cpc	r1, r24
 644:	99 1f       	adc	r25, r25
 646:	f1 cf       	rjmp	.-30     	; 0x62a <__fp_splitA+0xc>
 648:	86 95       	lsr	r24
 64a:	71 05       	cpc	r23, r1
 64c:	61 05       	cpc	r22, r1
 64e:	08 94       	sec
 650:	08 95       	ret

00000652 <__fp_zero>:
 652:	e8 94       	clt

00000654 <__fp_szero>:
 654:	bb 27       	eor	r27, r27
 656:	66 27       	eor	r22, r22
 658:	77 27       	eor	r23, r23
 65a:	cb 01       	movw	r24, r22
 65c:	97 f9       	bld	r25, 7
 65e:	08 95       	ret

00000660 <pow>:
 660:	fa 01       	movw	r30, r20
 662:	ee 0f       	add	r30, r30
 664:	ff 1f       	adc	r31, r31
 666:	30 96       	adiw	r30, 0x00	; 0
 668:	21 05       	cpc	r18, r1
 66a:	31 05       	cpc	r19, r1
 66c:	a1 f1       	breq	.+104    	; 0x6d6 <pow+0x76>
 66e:	61 15       	cp	r22, r1
 670:	71 05       	cpc	r23, r1
 672:	61 f4       	brne	.+24     	; 0x68c <pow+0x2c>
 674:	80 38       	cpi	r24, 0x80	; 128
 676:	bf e3       	ldi	r27, 0x3F	; 63
 678:	9b 07       	cpc	r25, r27
 67a:	49 f1       	breq	.+82     	; 0x6ce <pow+0x6e>
 67c:	68 94       	set
 67e:	90 38       	cpi	r25, 0x80	; 128
 680:	81 05       	cpc	r24, r1
 682:	61 f0       	breq	.+24     	; 0x69c <pow+0x3c>
 684:	80 38       	cpi	r24, 0x80	; 128
 686:	bf ef       	ldi	r27, 0xFF	; 255
 688:	9b 07       	cpc	r25, r27
 68a:	41 f0       	breq	.+16     	; 0x69c <pow+0x3c>
 68c:	99 23       	and	r25, r25
 68e:	4a f5       	brpl	.+82     	; 0x6e2 <pow+0x82>
 690:	ff 3f       	cpi	r31, 0xFF	; 255
 692:	e1 05       	cpc	r30, r1
 694:	31 05       	cpc	r19, r1
 696:	21 05       	cpc	r18, r1
 698:	19 f1       	breq	.+70     	; 0x6e0 <pow+0x80>
 69a:	e8 94       	clt
 69c:	08 94       	sec
 69e:	e7 95       	ror	r30
 6a0:	d9 01       	movw	r26, r18
 6a2:	aa 23       	and	r26, r26
 6a4:	29 f4       	brne	.+10     	; 0x6b0 <pow+0x50>
 6a6:	ab 2f       	mov	r26, r27
 6a8:	be 2f       	mov	r27, r30
 6aa:	f8 5f       	subi	r31, 0xF8	; 248
 6ac:	d0 f3       	brcs	.-12     	; 0x6a2 <pow+0x42>
 6ae:	10 c0       	rjmp	.+32     	; 0x6d0 <pow+0x70>
 6b0:	ff 5f       	subi	r31, 0xFF	; 255
 6b2:	70 f4       	brcc	.+28     	; 0x6d0 <pow+0x70>
 6b4:	a6 95       	lsr	r26
 6b6:	e0 f7       	brcc	.-8      	; 0x6b0 <pow+0x50>
 6b8:	f7 39       	cpi	r31, 0x97	; 151
 6ba:	50 f0       	brcs	.+20     	; 0x6d0 <pow+0x70>
 6bc:	19 f0       	breq	.+6      	; 0x6c4 <pow+0x64>
 6be:	ff 3a       	cpi	r31, 0xAF	; 175
 6c0:	38 f4       	brcc	.+14     	; 0x6d0 <pow+0x70>
 6c2:	9f 77       	andi	r25, 0x7F	; 127
 6c4:	9f 93       	push	r25
 6c6:	0d d0       	rcall	.+26     	; 0x6e2 <pow+0x82>
 6c8:	0f 90       	pop	r0
 6ca:	07 fc       	sbrc	r0, 7
 6cc:	90 58       	subi	r25, 0x80	; 128
 6ce:	08 95       	ret
 6d0:	46 f0       	brts	.+16     	; 0x6e2 <pow+0x82>
 6d2:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__fp_nan>
 6d6:	60 e0       	ldi	r22, 0x00	; 0
 6d8:	70 e0       	ldi	r23, 0x00	; 0
 6da:	80 e8       	ldi	r24, 0x80	; 128
 6dc:	9f e3       	ldi	r25, 0x3F	; 63
 6de:	08 95       	ret
 6e0:	4f e7       	ldi	r20, 0x7F	; 127
 6e2:	9f 77       	andi	r25, 0x7F	; 127
 6e4:	5f 93       	push	r21
 6e6:	4f 93       	push	r20
 6e8:	3f 93       	push	r19
 6ea:	2f 93       	push	r18
 6ec:	0e 94 2b 04 	call	0x856	; 0x856 <log>
 6f0:	2f 91       	pop	r18
 6f2:	3f 91       	pop	r19
 6f4:	4f 91       	pop	r20
 6f6:	5f 91       	pop	r21
 6f8:	0e 94 a7 04 	call	0x94e	; 0x94e <__mulsf3>
 6fc:	0c 94 88 03 	jmp	0x710	; 0x710 <exp>
 700:	29 f4       	brne	.+10     	; 0x70c <pow+0xac>
 702:	16 f0       	brts	.+4      	; 0x708 <pow+0xa8>
 704:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_inf>
 708:	0c 94 29 03 	jmp	0x652	; 0x652 <__fp_zero>
 70c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__fp_nan>

00000710 <exp>:
 710:	0e 94 0f 03 	call	0x61e	; 0x61e <__fp_splitA>
 714:	a8 f3       	brcs	.-22     	; 0x700 <pow+0xa0>
 716:	96 38       	cpi	r25, 0x86	; 134
 718:	a0 f7       	brcc	.-24     	; 0x702 <pow+0xa2>
 71a:	07 f8       	bld	r0, 7
 71c:	0f 92       	push	r0
 71e:	e8 94       	clt
 720:	2b e3       	ldi	r18, 0x3B	; 59
 722:	3a ea       	ldi	r19, 0xAA	; 170
 724:	48 eb       	ldi	r20, 0xB8	; 184
 726:	5f e7       	ldi	r21, 0x7F	; 127
 728:	0e 94 bd 04 	call	0x97a	; 0x97a <__mulsf3_pse>
 72c:	0f 92       	push	r0
 72e:	0f 92       	push	r0
 730:	0f 92       	push	r0
 732:	4d b7       	in	r20, 0x3d	; 61
 734:	5e b7       	in	r21, 0x3e	; 62
 736:	0f 92       	push	r0
 738:	0e 94 73 04 	call	0x8e6	; 0x8e6 <modf>
 73c:	e8 e6       	ldi	r30, 0x68	; 104
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	0e 94 ba 03 	call	0x774	; 0x774 <__fp_powser>
 744:	4f 91       	pop	r20
 746:	5f 91       	pop	r21
 748:	ef 91       	pop	r30
 74a:	ff 91       	pop	r31
 74c:	e5 95       	asr	r30
 74e:	ee 1f       	adc	r30, r30
 750:	ff 1f       	adc	r31, r31
 752:	49 f0       	breq	.+18     	; 0x766 <exp+0x56>
 754:	fe 57       	subi	r31, 0x7E	; 126
 756:	e0 68       	ori	r30, 0x80	; 128
 758:	44 27       	eor	r20, r20
 75a:	ee 0f       	add	r30, r30
 75c:	44 1f       	adc	r20, r20
 75e:	fa 95       	dec	r31
 760:	e1 f7       	brne	.-8      	; 0x75a <exp+0x4a>
 762:	41 95       	neg	r20
 764:	55 0b       	sbc	r21, r21
 766:	0e 94 ed 03 	call	0x7da	; 0x7da <ldexp>
 76a:	0f 90       	pop	r0
 76c:	07 fe       	sbrs	r0, 7
 76e:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <inverse>
 772:	08 95       	ret

00000774 <__fp_powser>:
 774:	df 93       	push	r29
 776:	cf 93       	push	r28
 778:	1f 93       	push	r17
 77a:	0f 93       	push	r16
 77c:	ff 92       	push	r15
 77e:	ef 92       	push	r14
 780:	df 92       	push	r13
 782:	7b 01       	movw	r14, r22
 784:	8c 01       	movw	r16, r24
 786:	68 94       	set
 788:	06 c0       	rjmp	.+12     	; 0x796 <__fp_powser+0x22>
 78a:	da 2e       	mov	r13, r26
 78c:	ef 01       	movw	r28, r30
 78e:	0e 94 ba 04 	call	0x974	; 0x974 <__mulsf3x>
 792:	fe 01       	movw	r30, r28
 794:	e8 94       	clt
 796:	a5 91       	lpm	r26, Z+
 798:	25 91       	lpm	r18, Z+
 79a:	35 91       	lpm	r19, Z+
 79c:	45 91       	lpm	r20, Z+
 79e:	55 91       	lpm	r21, Z+
 7a0:	a6 f3       	brts	.-24     	; 0x78a <__fp_powser+0x16>
 7a2:	ef 01       	movw	r28, r30
 7a4:	0e 94 2c 05 	call	0xa58	; 0xa58 <__addsf3x>
 7a8:	fe 01       	movw	r30, r28
 7aa:	97 01       	movw	r18, r14
 7ac:	a8 01       	movw	r20, r16
 7ae:	da 94       	dec	r13
 7b0:	69 f7       	brne	.-38     	; 0x78c <__fp_powser+0x18>
 7b2:	df 90       	pop	r13
 7b4:	ef 90       	pop	r14
 7b6:	ff 90       	pop	r15
 7b8:	0f 91       	pop	r16
 7ba:	1f 91       	pop	r17
 7bc:	cf 91       	pop	r28
 7be:	df 91       	pop	r29
 7c0:	08 95       	ret

000007c2 <inverse>:
 7c2:	9b 01       	movw	r18, r22
 7c4:	ac 01       	movw	r20, r24
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	80 e8       	ldi	r24, 0x80	; 128
 7cc:	9f e3       	ldi	r25, 0x3F	; 63
 7ce:	0c 94 01 02 	jmp	0x402	; 0x402 <__divsf3>
 7d2:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_inf>
 7d6:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_mpack>

000007da <ldexp>:
 7da:	0e 94 0f 03 	call	0x61e	; 0x61e <__fp_splitA>
 7de:	d8 f3       	brcs	.-10     	; 0x7d6 <inverse+0x14>
 7e0:	99 23       	and	r25, r25
 7e2:	c9 f3       	breq	.-14     	; 0x7d6 <inverse+0x14>
 7e4:	94 0f       	add	r25, r20
 7e6:	51 1d       	adc	r21, r1
 7e8:	a3 f3       	brvs	.-24     	; 0x7d2 <inverse+0x10>
 7ea:	91 50       	subi	r25, 0x01	; 1
 7ec:	50 40       	sbci	r21, 0x00	; 0
 7ee:	94 f0       	brlt	.+36     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7f0:	59 f0       	breq	.+22     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7f2:	88 23       	and	r24, r24
 7f4:	32 f0       	brmi	.+12     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7f6:	66 0f       	add	r22, r22
 7f8:	77 1f       	adc	r23, r23
 7fa:	88 1f       	adc	r24, r24
 7fc:	91 50       	subi	r25, 0x01	; 1
 7fe:	50 40       	sbci	r21, 0x00	; 0
 800:	c1 f7       	brne	.-16     	; 0x7f2 <ldexp+0x18>
 802:	9e 3f       	cpi	r25, 0xFE	; 254
 804:	51 05       	cpc	r21, r1
 806:	2c f7       	brge	.-54     	; 0x7d2 <inverse+0x10>
 808:	88 0f       	add	r24, r24
 80a:	91 1d       	adc	r25, r1
 80c:	96 95       	lsr	r25
 80e:	87 95       	ror	r24
 810:	97 f9       	bld	r25, 7
 812:	08 95       	ret
 814:	5f 3f       	cpi	r21, 0xFF	; 255
 816:	ac f0       	brlt	.+42     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 818:	98 3e       	cpi	r25, 0xE8	; 232
 81a:	9c f0       	brlt	.+38     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 81c:	bb 27       	eor	r27, r27
 81e:	86 95       	lsr	r24
 820:	77 95       	ror	r23
 822:	67 95       	ror	r22
 824:	b7 95       	ror	r27
 826:	08 f4       	brcc	.+2      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 828:	b1 60       	ori	r27, 0x01	; 1
 82a:	93 95       	inc	r25
 82c:	c1 f7       	brne	.-16     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 82e:	bb 0f       	add	r27, r27
 830:	58 f7       	brcc	.-42     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 832:	11 f4       	brne	.+4      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 834:	60 ff       	sbrs	r22, 0
 836:	e8 cf       	rjmp	.-48     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 838:	6f 5f       	subi	r22, 0xFF	; 255
 83a:	7f 4f       	sbci	r23, 0xFF	; 255
 83c:	8f 4f       	sbci	r24, 0xFF	; 255
 83e:	9f 4f       	sbci	r25, 0xFF	; 255
 840:	e3 cf       	rjmp	.-58     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 842:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_szero>
 846:	16 f0       	brts	.+4      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 848:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_mpack>
 84c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__fp_nan>
 850:	68 94       	set
 852:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_inf>

00000856 <log>:
 856:	0e 94 0f 03 	call	0x61e	; 0x61e <__fp_splitA>
 85a:	a8 f3       	brcs	.-22     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 85c:	99 23       	and	r25, r25
 85e:	c1 f3       	breq	.-16     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 860:	ae f3       	brts	.-22     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 862:	df 93       	push	r29
 864:	cf 93       	push	r28
 866:	1f 93       	push	r17
 868:	0f 93       	push	r16
 86a:	ff 92       	push	r15
 86c:	c9 2f       	mov	r28, r25
 86e:	dd 27       	eor	r29, r29
 870:	88 23       	and	r24, r24
 872:	2a f0       	brmi	.+10     	; 0x87e <log+0x28>
 874:	21 97       	sbiw	r28, 0x01	; 1
 876:	66 0f       	add	r22, r22
 878:	77 1f       	adc	r23, r23
 87a:	88 1f       	adc	r24, r24
 87c:	da f7       	brpl	.-10     	; 0x874 <log+0x1e>
 87e:	20 e0       	ldi	r18, 0x00	; 0
 880:	30 e0       	ldi	r19, 0x00	; 0
 882:	40 e8       	ldi	r20, 0x80	; 128
 884:	5f eb       	ldi	r21, 0xBF	; 191
 886:	9f e3       	ldi	r25, 0x3F	; 63
 888:	88 39       	cpi	r24, 0x98	; 152
 88a:	20 f0       	brcs	.+8      	; 0x894 <log+0x3e>
 88c:	80 3e       	cpi	r24, 0xE0	; 224
 88e:	38 f0       	brcs	.+14     	; 0x89e <log+0x48>
 890:	21 96       	adiw	r28, 0x01	; 1
 892:	8f 77       	andi	r24, 0x7F	; 127
 894:	0e 94 15 05 	call	0xa2a	; 0xa2a <__addsf3>
 898:	e0 e9       	ldi	r30, 0x90	; 144
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	04 c0       	rjmp	.+8      	; 0x8a6 <log+0x50>
 89e:	0e 94 15 05 	call	0xa2a	; 0xa2a <__addsf3>
 8a2:	ed eb       	ldi	r30, 0xBD	; 189
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	0e 94 ba 03 	call	0x774	; 0x774 <__fp_powser>
 8aa:	8b 01       	movw	r16, r22
 8ac:	be 01       	movw	r22, r28
 8ae:	ec 01       	movw	r28, r24
 8b0:	fb 2e       	mov	r15, r27
 8b2:	6f 57       	subi	r22, 0x7F	; 127
 8b4:	71 09       	sbc	r23, r1
 8b6:	75 95       	asr	r23
 8b8:	77 1f       	adc	r23, r23
 8ba:	88 0b       	sbc	r24, r24
 8bc:	99 0b       	sbc	r25, r25
 8be:	0e 94 a4 02 	call	0x548	; 0x548 <__floatsisf>
 8c2:	28 e1       	ldi	r18, 0x18	; 24
 8c4:	32 e7       	ldi	r19, 0x72	; 114
 8c6:	41 e3       	ldi	r20, 0x31	; 49
 8c8:	5f e3       	ldi	r21, 0x3F	; 63
 8ca:	0e 94 ba 04 	call	0x974	; 0x974 <__mulsf3x>
 8ce:	af 2d       	mov	r26, r15
 8d0:	98 01       	movw	r18, r16
 8d2:	ae 01       	movw	r20, r28
 8d4:	ff 90       	pop	r15
 8d6:	0f 91       	pop	r16
 8d8:	1f 91       	pop	r17
 8da:	cf 91       	pop	r28
 8dc:	df 91       	pop	r29
 8de:	0e 94 2c 05 	call	0xa58	; 0xa58 <__addsf3x>
 8e2:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_round>

000008e6 <modf>:
 8e6:	fa 01       	movw	r30, r20
 8e8:	dc 01       	movw	r26, r24
 8ea:	aa 0f       	add	r26, r26
 8ec:	bb 1f       	adc	r27, r27
 8ee:	9b 01       	movw	r18, r22
 8f0:	ac 01       	movw	r20, r24
 8f2:	bf 57       	subi	r27, 0x7F	; 127
 8f4:	28 f4       	brcc	.+10     	; 0x900 <__stack+0x1>
 8f6:	22 27       	eor	r18, r18
 8f8:	33 27       	eor	r19, r19
 8fa:	44 27       	eor	r20, r20
 8fc:	50 78       	andi	r21, 0x80	; 128
 8fe:	20 c0       	rjmp	.+64     	; 0x940 <__stack+0x41>
 900:	b7 51       	subi	r27, 0x17	; 23
 902:	90 f4       	brcc	.+36     	; 0x928 <__stack+0x29>
 904:	ab 2f       	mov	r26, r27
 906:	00 24       	eor	r0, r0
 908:	46 95       	lsr	r20
 90a:	37 95       	ror	r19
 90c:	27 95       	ror	r18
 90e:	01 1c       	adc	r0, r1
 910:	a3 95       	inc	r26
 912:	d2 f3       	brmi	.-12     	; 0x908 <__stack+0x9>
 914:	00 20       	and	r0, r0
 916:	71 f0       	breq	.+28     	; 0x934 <__stack+0x35>
 918:	22 0f       	add	r18, r18
 91a:	33 1f       	adc	r19, r19
 91c:	44 1f       	adc	r20, r20
 91e:	b3 95       	inc	r27
 920:	da f3       	brmi	.-10     	; 0x918 <__stack+0x19>
 922:	0e d0       	rcall	.+28     	; 0x940 <__stack+0x41>
 924:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__subsf3>
 928:	61 30       	cpi	r22, 0x01	; 1
 92a:	71 05       	cpc	r23, r1
 92c:	a0 e8       	ldi	r26, 0x80	; 128
 92e:	8a 07       	cpc	r24, r26
 930:	b9 46       	sbci	r27, 0x69	; 105
 932:	30 f4       	brcc	.+12     	; 0x940 <__stack+0x41>
 934:	9b 01       	movw	r18, r22
 936:	ac 01       	movw	r20, r24
 938:	66 27       	eor	r22, r22
 93a:	77 27       	eor	r23, r23
 93c:	88 27       	eor	r24, r24
 93e:	90 78       	andi	r25, 0x80	; 128
 940:	30 96       	adiw	r30, 0x00	; 0
 942:	21 f0       	breq	.+8      	; 0x94c <__stack+0x4d>
 944:	20 83       	st	Z, r18
 946:	31 83       	std	Z+1, r19	; 0x01
 948:	42 83       	std	Z+2, r20	; 0x02
 94a:	53 83       	std	Z+3, r21	; 0x03
 94c:	08 95       	ret

0000094e <__mulsf3>:
 94e:	0e 94 ba 04 	call	0x974	; 0x974 <__mulsf3x>
 952:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_round>
 956:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__fp_pscA>
 95a:	38 f0       	brcs	.+14     	; 0x96a <__mulsf3+0x1c>
 95c:	0e 94 ef 02 	call	0x5de	; 0x5de <__fp_pscB>
 960:	20 f0       	brcs	.+8      	; 0x96a <__mulsf3+0x1c>
 962:	95 23       	and	r25, r21
 964:	11 f0       	breq	.+4      	; 0x96a <__mulsf3+0x1c>
 966:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_inf>
 96a:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__fp_nan>
 96e:	11 24       	eor	r1, r1
 970:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_szero>

00000974 <__mulsf3x>:
 974:	0e 94 07 03 	call	0x60e	; 0x60e <__fp_split3>
 978:	70 f3       	brcs	.-36     	; 0x956 <__mulsf3+0x8>

0000097a <__mulsf3_pse>:
 97a:	95 9f       	mul	r25, r21
 97c:	c1 f3       	breq	.-16     	; 0x96e <__mulsf3+0x20>
 97e:	95 0f       	add	r25, r21
 980:	50 e0       	ldi	r21, 0x00	; 0
 982:	55 1f       	adc	r21, r21
 984:	62 9f       	mul	r22, r18
 986:	f0 01       	movw	r30, r0
 988:	72 9f       	mul	r23, r18
 98a:	bb 27       	eor	r27, r27
 98c:	f0 0d       	add	r31, r0
 98e:	b1 1d       	adc	r27, r1
 990:	63 9f       	mul	r22, r19
 992:	aa 27       	eor	r26, r26
 994:	f0 0d       	add	r31, r0
 996:	b1 1d       	adc	r27, r1
 998:	aa 1f       	adc	r26, r26
 99a:	64 9f       	mul	r22, r20
 99c:	66 27       	eor	r22, r22
 99e:	b0 0d       	add	r27, r0
 9a0:	a1 1d       	adc	r26, r1
 9a2:	66 1f       	adc	r22, r22
 9a4:	82 9f       	mul	r24, r18
 9a6:	22 27       	eor	r18, r18
 9a8:	b0 0d       	add	r27, r0
 9aa:	a1 1d       	adc	r26, r1
 9ac:	62 1f       	adc	r22, r18
 9ae:	73 9f       	mul	r23, r19
 9b0:	b0 0d       	add	r27, r0
 9b2:	a1 1d       	adc	r26, r1
 9b4:	62 1f       	adc	r22, r18
 9b6:	83 9f       	mul	r24, r19
 9b8:	a0 0d       	add	r26, r0
 9ba:	61 1d       	adc	r22, r1
 9bc:	22 1f       	adc	r18, r18
 9be:	74 9f       	mul	r23, r20
 9c0:	33 27       	eor	r19, r19
 9c2:	a0 0d       	add	r26, r0
 9c4:	61 1d       	adc	r22, r1
 9c6:	23 1f       	adc	r18, r19
 9c8:	84 9f       	mul	r24, r20
 9ca:	60 0d       	add	r22, r0
 9cc:	21 1d       	adc	r18, r1
 9ce:	82 2f       	mov	r24, r18
 9d0:	76 2f       	mov	r23, r22
 9d2:	6a 2f       	mov	r22, r26
 9d4:	11 24       	eor	r1, r1
 9d6:	9f 57       	subi	r25, 0x7F	; 127
 9d8:	50 40       	sbci	r21, 0x00	; 0
 9da:	9a f0       	brmi	.+38     	; 0xa02 <__mulsf3_pse+0x88>
 9dc:	f1 f0       	breq	.+60     	; 0xa1a <__mulsf3_pse+0xa0>
 9de:	88 23       	and	r24, r24
 9e0:	4a f0       	brmi	.+18     	; 0x9f4 <__mulsf3_pse+0x7a>
 9e2:	ee 0f       	add	r30, r30
 9e4:	ff 1f       	adc	r31, r31
 9e6:	bb 1f       	adc	r27, r27
 9e8:	66 1f       	adc	r22, r22
 9ea:	77 1f       	adc	r23, r23
 9ec:	88 1f       	adc	r24, r24
 9ee:	91 50       	subi	r25, 0x01	; 1
 9f0:	50 40       	sbci	r21, 0x00	; 0
 9f2:	a9 f7       	brne	.-22     	; 0x9de <__mulsf3_pse+0x64>
 9f4:	9e 3f       	cpi	r25, 0xFE	; 254
 9f6:	51 05       	cpc	r21, r1
 9f8:	80 f0       	brcs	.+32     	; 0xa1a <__mulsf3_pse+0xa0>
 9fa:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_inf>
 9fe:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_szero>
 a02:	5f 3f       	cpi	r21, 0xFF	; 255
 a04:	e4 f3       	brlt	.-8      	; 0x9fe <__mulsf3_pse+0x84>
 a06:	98 3e       	cpi	r25, 0xE8	; 232
 a08:	d4 f3       	brlt	.-12     	; 0x9fe <__mulsf3_pse+0x84>
 a0a:	86 95       	lsr	r24
 a0c:	77 95       	ror	r23
 a0e:	67 95       	ror	r22
 a10:	b7 95       	ror	r27
 a12:	f7 95       	ror	r31
 a14:	e7 95       	ror	r30
 a16:	9f 5f       	subi	r25, 0xFF	; 255
 a18:	c1 f7       	brne	.-16     	; 0xa0a <__mulsf3_pse+0x90>
 a1a:	fe 2b       	or	r31, r30
 a1c:	88 0f       	add	r24, r24
 a1e:	91 1d       	adc	r25, r1
 a20:	96 95       	lsr	r25
 a22:	87 95       	ror	r24
 a24:	97 f9       	bld	r25, 7
 a26:	08 95       	ret

00000a28 <__subsf3>:
 a28:	50 58       	subi	r21, 0x80	; 128

00000a2a <__addsf3>:
 a2a:	bb 27       	eor	r27, r27
 a2c:	aa 27       	eor	r26, r26
 a2e:	0e 94 2c 05 	call	0xa58	; 0xa58 <__addsf3x>
 a32:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_round>
 a36:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__fp_pscA>
 a3a:	38 f0       	brcs	.+14     	; 0xa4a <__addsf3+0x20>
 a3c:	0e 94 ef 02 	call	0x5de	; 0x5de <__fp_pscB>
 a40:	20 f0       	brcs	.+8      	; 0xa4a <__addsf3+0x20>
 a42:	39 f4       	brne	.+14     	; 0xa52 <__addsf3+0x28>
 a44:	9f 3f       	cpi	r25, 0xFF	; 255
 a46:	19 f4       	brne	.+6      	; 0xa4e <__addsf3+0x24>
 a48:	26 f4       	brtc	.+8      	; 0xa52 <__addsf3+0x28>
 a4a:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__fp_nan>
 a4e:	0e f4       	brtc	.+2      	; 0xa52 <__addsf3+0x28>
 a50:	e0 95       	com	r30
 a52:	e7 fb       	bst	r30, 7
 a54:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_inf>

00000a58 <__addsf3x>:
 a58:	e9 2f       	mov	r30, r25
 a5a:	0e 94 07 03 	call	0x60e	; 0x60e <__fp_split3>
 a5e:	58 f3       	brcs	.-42     	; 0xa36 <__addsf3+0xc>
 a60:	ba 17       	cp	r27, r26
 a62:	62 07       	cpc	r22, r18
 a64:	73 07       	cpc	r23, r19
 a66:	84 07       	cpc	r24, r20
 a68:	95 07       	cpc	r25, r21
 a6a:	20 f0       	brcs	.+8      	; 0xa74 <__addsf3x+0x1c>
 a6c:	79 f4       	brne	.+30     	; 0xa8c <__addsf3x+0x34>
 a6e:	a6 f5       	brtc	.+104    	; 0xad8 <__addsf3x+0x80>
 a70:	0c 94 29 03 	jmp	0x652	; 0x652 <__fp_zero>
 a74:	0e f4       	brtc	.+2      	; 0xa78 <__addsf3x+0x20>
 a76:	e0 95       	com	r30
 a78:	0b 2e       	mov	r0, r27
 a7a:	ba 2f       	mov	r27, r26
 a7c:	a0 2d       	mov	r26, r0
 a7e:	0b 01       	movw	r0, r22
 a80:	b9 01       	movw	r22, r18
 a82:	90 01       	movw	r18, r0
 a84:	0c 01       	movw	r0, r24
 a86:	ca 01       	movw	r24, r20
 a88:	a0 01       	movw	r20, r0
 a8a:	11 24       	eor	r1, r1
 a8c:	ff 27       	eor	r31, r31
 a8e:	59 1b       	sub	r21, r25
 a90:	99 f0       	breq	.+38     	; 0xab8 <__addsf3x+0x60>
 a92:	59 3f       	cpi	r21, 0xF9	; 249
 a94:	50 f4       	brcc	.+20     	; 0xaaa <__addsf3x+0x52>
 a96:	50 3e       	cpi	r21, 0xE0	; 224
 a98:	68 f1       	brcs	.+90     	; 0xaf4 <__addsf3x+0x9c>
 a9a:	1a 16       	cp	r1, r26
 a9c:	f0 40       	sbci	r31, 0x00	; 0
 a9e:	a2 2f       	mov	r26, r18
 aa0:	23 2f       	mov	r18, r19
 aa2:	34 2f       	mov	r19, r20
 aa4:	44 27       	eor	r20, r20
 aa6:	58 5f       	subi	r21, 0xF8	; 248
 aa8:	f3 cf       	rjmp	.-26     	; 0xa90 <__addsf3x+0x38>
 aaa:	46 95       	lsr	r20
 aac:	37 95       	ror	r19
 aae:	27 95       	ror	r18
 ab0:	a7 95       	ror	r26
 ab2:	f0 40       	sbci	r31, 0x00	; 0
 ab4:	53 95       	inc	r21
 ab6:	c9 f7       	brne	.-14     	; 0xaaa <__addsf3x+0x52>
 ab8:	7e f4       	brtc	.+30     	; 0xad8 <__addsf3x+0x80>
 aba:	1f 16       	cp	r1, r31
 abc:	ba 0b       	sbc	r27, r26
 abe:	62 0b       	sbc	r22, r18
 ac0:	73 0b       	sbc	r23, r19
 ac2:	84 0b       	sbc	r24, r20
 ac4:	ba f0       	brmi	.+46     	; 0xaf4 <__addsf3x+0x9c>
 ac6:	91 50       	subi	r25, 0x01	; 1
 ac8:	a1 f0       	breq	.+40     	; 0xaf2 <__addsf3x+0x9a>
 aca:	ff 0f       	add	r31, r31
 acc:	bb 1f       	adc	r27, r27
 ace:	66 1f       	adc	r22, r22
 ad0:	77 1f       	adc	r23, r23
 ad2:	88 1f       	adc	r24, r24
 ad4:	c2 f7       	brpl	.-16     	; 0xac6 <__addsf3x+0x6e>
 ad6:	0e c0       	rjmp	.+28     	; 0xaf4 <__addsf3x+0x9c>
 ad8:	ba 0f       	add	r27, r26
 ada:	62 1f       	adc	r22, r18
 adc:	73 1f       	adc	r23, r19
 ade:	84 1f       	adc	r24, r20
 ae0:	48 f4       	brcc	.+18     	; 0xaf4 <__addsf3x+0x9c>
 ae2:	87 95       	ror	r24
 ae4:	77 95       	ror	r23
 ae6:	67 95       	ror	r22
 ae8:	b7 95       	ror	r27
 aea:	f7 95       	ror	r31
 aec:	9e 3f       	cpi	r25, 0xFE	; 254
 aee:	08 f0       	brcs	.+2      	; 0xaf2 <__addsf3x+0x9a>
 af0:	b0 cf       	rjmp	.-160    	; 0xa52 <__addsf3+0x28>
 af2:	93 95       	inc	r25
 af4:	88 0f       	add	r24, r24
 af6:	08 f0       	brcs	.+2      	; 0xafa <__addsf3x+0xa2>
 af8:	99 27       	eor	r25, r25
 afa:	ee 0f       	add	r30, r30
 afc:	97 95       	ror	r25
 afe:	87 95       	ror	r24
 b00:	08 95       	ret

00000b02 <__fp_mpack>:
 b02:	9f 3f       	cpi	r25, 0xFF	; 255
 b04:	31 f0       	breq	.+12     	; 0xb12 <__fp_mpack_finite+0xc>

00000b06 <__fp_mpack_finite>:
 b06:	91 50       	subi	r25, 0x01	; 1
 b08:	20 f4       	brcc	.+8      	; 0xb12 <__fp_mpack_finite+0xc>
 b0a:	87 95       	ror	r24
 b0c:	77 95       	ror	r23
 b0e:	67 95       	ror	r22
 b10:	b7 95       	ror	r27
 b12:	88 0f       	add	r24, r24
 b14:	91 1d       	adc	r25, r1
 b16:	96 95       	lsr	r25
 b18:	87 95       	ror	r24
 b1a:	97 f9       	bld	r25, 7
 b1c:	08 95       	ret

00000b1e <__divmodhi4>:
 b1e:	97 fb       	bst	r25, 7
 b20:	07 2e       	mov	r0, r23
 b22:	16 f4       	brtc	.+4      	; 0xb28 <__divmodhi4+0xa>
 b24:	00 94       	com	r0
 b26:	07 d0       	rcall	.+14     	; 0xb36 <__divmodhi4_neg1>
 b28:	77 fd       	sbrc	r23, 7
 b2a:	09 d0       	rcall	.+18     	; 0xb3e <__divmodhi4_neg2>
 b2c:	0e 94 b2 05 	call	0xb64	; 0xb64 <__udivmodhi4>
 b30:	07 fc       	sbrc	r0, 7
 b32:	05 d0       	rcall	.+10     	; 0xb3e <__divmodhi4_neg2>
 b34:	3e f4       	brtc	.+14     	; 0xb44 <__divmodhi4_exit>

00000b36 <__divmodhi4_neg1>:
 b36:	90 95       	com	r25
 b38:	81 95       	neg	r24
 b3a:	9f 4f       	sbci	r25, 0xFF	; 255
 b3c:	08 95       	ret

00000b3e <__divmodhi4_neg2>:
 b3e:	70 95       	com	r23
 b40:	61 95       	neg	r22
 b42:	7f 4f       	sbci	r23, 0xFF	; 255

00000b44 <__divmodhi4_exit>:
 b44:	08 95       	ret

00000b46 <__umulhisi3>:
 b46:	a2 9f       	mul	r26, r18
 b48:	b0 01       	movw	r22, r0
 b4a:	b3 9f       	mul	r27, r19
 b4c:	c0 01       	movw	r24, r0
 b4e:	a3 9f       	mul	r26, r19
 b50:	70 0d       	add	r23, r0
 b52:	81 1d       	adc	r24, r1
 b54:	11 24       	eor	r1, r1
 b56:	91 1d       	adc	r25, r1
 b58:	b2 9f       	mul	r27, r18
 b5a:	70 0d       	add	r23, r0
 b5c:	81 1d       	adc	r24, r1
 b5e:	11 24       	eor	r1, r1
 b60:	91 1d       	adc	r25, r1
 b62:	08 95       	ret

00000b64 <__udivmodhi4>:
 b64:	aa 1b       	sub	r26, r26
 b66:	bb 1b       	sub	r27, r27
 b68:	51 e1       	ldi	r21, 0x11	; 17
 b6a:	07 c0       	rjmp	.+14     	; 0xb7a <__udivmodhi4_ep>

00000b6c <__udivmodhi4_loop>:
 b6c:	aa 1f       	adc	r26, r26
 b6e:	bb 1f       	adc	r27, r27
 b70:	a6 17       	cp	r26, r22
 b72:	b7 07       	cpc	r27, r23
 b74:	10 f0       	brcs	.+4      	; 0xb7a <__udivmodhi4_ep>
 b76:	a6 1b       	sub	r26, r22
 b78:	b7 0b       	sbc	r27, r23

00000b7a <__udivmodhi4_ep>:
 b7a:	88 1f       	adc	r24, r24
 b7c:	99 1f       	adc	r25, r25
 b7e:	5a 95       	dec	r21
 b80:	a9 f7       	brne	.-22     	; 0xb6c <__udivmodhi4_loop>
 b82:	80 95       	com	r24
 b84:	90 95       	com	r25
 b86:	bc 01       	movw	r22, r24
 b88:	cd 01       	movw	r24, r26
 b8a:	08 95       	ret

00000b8c <_exit>:
 b8c:	f8 94       	cli

00000b8e <__stop_program>:
 b8e:	ff cf       	rjmp	.-2      	; 0xb8e <__stop_program>
